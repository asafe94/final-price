{"ast":null,"code":"var _jsxFileName = \"/home/asafe/repos/final-price/src/components/CalculateBtn/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CalculateBtn = () => {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const finalPrice = (cost, business) => {\n    cost = Number(cost);\n    const markup = {\n      CMRod: 2.5,\n      HVNRod: 2.5,\n      HVNBon: 2.3,\n      RPRod: 2.3\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: () => {\n        switch (business) {\n          case 'HVN':\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de custo: R$\", cost]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de venda Rodovi\\xE1ria: R$\", cost * markup.HVNRod]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de venda Bonsucesso: R$\", cost * markup.HVNBon]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true);\n\n          case 'CM':\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de custo: R$\", cost]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de venda Rodovi\\xE1ria: R$\", cost * markup.CMRod]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true);\n\n          case 'RP':\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de custo: R$\", cost]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Pre\\xE7o de venda Rodovi\\xE1ria: R$\", cost * markup.RPRod]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n\n    const checkValue = num => {\n      num = Number(num);\n\n      if (num == 0) {\n        return alert('Erro: o valor de custo não pode ser igual a 0.');\n      } else if (isNaN(num)) {\n        return alert('Erro: o valor precisa ser um número');\n      } else {\n        finalPrice(num, 'HVN');\n        console.log(num);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Custo\",\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n        value: \"Calcular\",\n        onClick: () => checkValue(inputValue),\n        children: \"Calcular\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  };\n};\n\n_s(CalculateBtn, \"iEYviHCJXqr/rxvP+SpzgvyJcbo=\");\n\n_c = CalculateBtn;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculateBtn\");","map":{"version":3,"sources":["/home/asafe/repos/final-price/src/components/CalculateBtn/index.jsx"],"names":["useState","CalculateBtn","inputValue","setInputValue","finalPrice","cost","business","Number","markup","CMRod","HVNRod","HVNBon","RPRod","checkValue","num","alert","isNaN","console","log","e","target","value"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMI,UAAU,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACrCD,IAAAA,IAAI,GAAGE,MAAM,CAACF,IAAD,CAAb;AAEA,UAAMG,MAAM,GAAG;AACbC,MAAAA,KAAK,EAAE,GADM;AAEbC,MAAAA,MAAM,EAAE,GAFK;AAGbC,MAAAA,MAAM,EAAE,GAHK;AAIbC,MAAAA,KAAK,EAAE;AAJM,KAAf;AAOA,wBACE;AAAA,gBACE,MAAM;AAGN,gBAAQN,QAAR;AACE,eAAK,KAAL;AACE,gCACE;AAAA,sCACE;AAAA,oDAAsBD,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,kEAAiCA,IAAI,GAAGG,MAAM,CAACE,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE;AAAA,+DACgCL,IAAI,GAAGG,MAAM,CAACG,MAD9C;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA,4BADF;;AASF,eAAK,IAAL;AACE,gCACE;AAAA,sCACA;AAAA,oDACqBN,IADrB;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,eAIA;AAAA,kEACgCA,IAAI,GAAGG,MAAM,CAACC,KAD9C;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJA;AAAA,4BADF;;AAUF,eAAK,IAAL;AACE,gCACE;AAAA,sCACA;AAAA,oDACqBJ,IADrB;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,eAIA;AAAA,kEACgCA,IAAI,GAAGG,MAAM,CAACI,KAD9C;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJA;AAAA,4BADF;AAvBJ;AAkCH;AAtCC;AAAA;AAAA;AAAA;AAAA,YADF;;AA2CF,UAAMC,UAAU,GAAIC,GAAD,IAAS;AAC1BA,MAAAA,GAAG,GAAGP,MAAM,CAACO,GAAD,CAAZ;;AAGA,UAAIA,GAAG,IAAI,CAAX,EACA;AACA,eAAOC,KAAK,CAAC,gDAAD,CAAZ;AACC,OAHD,MAGO,IAAIC,KAAK,CAACF,GAAD,CAAT,EACP;AACA,eAAOC,KAAK,CAAC,qCAAD,CAAZ;AACC,OAHM,MAIP;AACAX,QAAAA,UAAU,CAACU,GAAD,EAAM,KAAN,CAAV;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACC;AACF,KAfD;;AAiBA,wBACE;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,WAAW,EAAC,OAAjC;AAAyC,QAAA,QAAQ,EAAEK,CAAC,IAAIhB,aAAa,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV;AAArE;AAAA;AAAA;AAAA;AAAA,cADF,eAEA,qCAFA,eAIE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE,MAAMR,UAAU,CAACX,UAAD,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAQD,GA9EC;AA+ED,CAlFM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import {useState} from \"react\";\n\nexport const CalculateBtn = () => {\n  const [inputValue, setInputValue] = useState(\"\")\n\n  const finalPrice = (cost, business) => {\n    cost = Number(cost)\n\n    const markup = {\n      CMRod: 2.5,\n      HVNRod: 2.5,\n      HVNBon: 2.3,\n      RPRod: 2.3\n    }\n    \n    return (\n      <div>\n      {(() => {\n\n\n        switch (business) {\n          case 'HVN':\n            return (\n              <>\n                <p>Preço de custo: R${cost}</p>\n                <p>Preço de venda Rodoviária: R${cost * markup.HVNRod}</p>\n                <p>\n                  Preço de venda Bonsucesso: R${cost * markup.HVNBon}\n                </p>\n              </>\n            )\n          case 'CM':\n            return (\n              <>\n              <p>\n                Preço de custo: R${cost}\n              </p>\n              <p>\n                Preço de venda Rodoviária: R${cost * markup.CMRod}\n              </p>\n            </>\n            )\n          case 'RP':\n            return (\n              <>\n              <p>\n                Preço de custo: R${cost}\n              </p>\n              <p>\n                Preço de venda Rodoviária: R${cost * markup.RPRod}\n              </p>\n            </>\n            )\n        }\n    })}\n      </div>\n    )\n  \n  const checkValue = (num) => {\n    num = Number(num)\n\n\n    if (num == 0) \n    {\n    return alert('Erro: o valor de custo não pode ser igual a 0.');\n    } else if (isNaN(num)) \n    {\n    return alert('Erro: o valor precisa ser um número');\n    } else\n    {\n    finalPrice(num, 'HVN')\n    console.log(num)\n    }\n  }\n\n  return (\n    <>\n      <input type=\"number\" placeholder=\"Custo\" onChange={e => setInputValue(e.target.value)}/>\n    <>    \n    </>\n      <button value=\"Calcular\" onClick={() => checkValue(inputValue)}>Calcular</button> \n    </>\n  )\n}\n}\n"]},"metadata":{},"sourceType":"module"}